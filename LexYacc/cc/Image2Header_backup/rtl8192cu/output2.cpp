#include <stdio.h>
#include <stdlib.h>
int array_length = 0;
const unsigned int PHY_REG_1TArray[] = { 

0xFF03050E, 0xABCD,

0x024, 0x0011800D, 0x028, 0x00FFDB83, 0x800, 0x80040000, 0x804, 0x00000001, 0x808, 0x0000FC00, 0x80C, 0x0000000A, 0x810, 0x10005388, 0x814, 0x020C3D10, 0x818, 0x02200385, 0x81C, 0x00000000, 0x820, 0x01000100, 0x824, 0x00390004, 0x828, 0x00000000, 0x82C, 0x00000000, 0x830, 0x00000000, 

0xFF00040A, 0xCDEF,

0x834, 0x00000000, 0x838, 0x00000000, 0x83C, 0x00000000, 0x840, 0x00010000, 0x844, 0x00000000, 0x848, 0x00000000, 0x84C, 0x00000000, 

0xFF0C0211, 0xCDCD, 

0x850, 0x00000000, 0x854, 0x00000000, 0x858, 0x569A569A, 0x85C, 0x001B25A4, 0x860, 0x66E60230, 0x864, 0x061F0130, 0x868, 0x00000000, 0x86C, 0x32323200, 0x870, 0x07000700, 0x874, 0x22004000, 0x878, 0x00000808, 0x87C, 0x00000000, 0x880, 0xC0083070, 0x884, 0x000004D5, 0x888, 0x00000000, 0x88C, 0xCCC000C0, 0x890, 0x00000800, 0x894, 0xFFFFFFFE, 0x898, 0x40302010, 0x89C, 0x00706050, 0x900, 0x00000000, 0x904, 0x00000023, 0x908, 0x00000000, 0x90C, 0x81121111, 0xA00, 0x00D047C8, 0xA04, 0x80FF000C, 0xA08, 0x8C838300, 0xA0C, 0x2E68120F, 0xA10, 0x9500BB78, 0xA14, 0x11144028, 0xA18, 0x00881117, 0xA1C, 0x89140F00, 0xA20, 0x1A1B0000, 0xA24, 0x090E1317, 0xA28, 0x00000204, 0xA2C, 0x00D30000, 0xA70, 0x101FBF00, 0xA74, 0x00000007, 0xC00, 0x48071D40, 0xC04, 0x03A05611, 0xC08, 0x000000E4, 0xC0C, 0x6C6C6C6C, 0xC10, 0x08800000, 0xC14, 0x40000100, 0xC18, 0x08800000, 0xC1C, 0x40000100, 0xC20, 0x00000000, 0xC24, 0x00000000, 0xC28, 0x00000000, 0xC2C, 0x00000000, 0xC30, 0x69E9AC44, 0xC34, 0x469652CF, 0xC38, 0x49795994, 0xC3C, 0x0A97971C, 0xC40, 0x1F7C403F, 0xC44, 0x000100B7, 0xC48, 0xEC020107, 0xC4C, 0x007F037F, 0xC50, 0x6954341E, 0xC54, 0x43BC0094, 0xC58, 0x6954341E, 0xC5C, 0x433C0094, 0xC60, 0x00000000, 0xC64, 0x5116848B, 0xC68, 0x47C00BFF, 0xC6C, 0x00000036, 0xC70, 0x2C7F000D, 0xC74, 0x018610DB, 0xC78, 0x0000001F, 0xC7C, 0x00B91612, 0xC80, 0x40000100, 0xC84, 0x20F60000, 0xC88, 0x40000100, 0xC8C, 0x20200000, 0xC90, 0x00121820, 0xC94, 0x00000000, 0xC98, 0x00121820, 0xC9C, 0x00007F7F, 0xCA0, 0x00000000, 0xCA4, 0x00000080, 0xCA8, 0x00000000, 0xCAC, 0x00000000, 0xCB0, 0x00000000, 0xCB4, 0x00000000, 0xCB8, 0x00000000, 0xCBC, 0x28000000, 0xCC0, 0x00000000, 0xCC4, 0x00000000, 0xCC8, 0x00000000, 0xCCC, 0x00000000, 0xCD0, 0x00000000, 0xCD4, 0x00000000, 0xCD8, 0x64B22427, 0xCDC, 0x00766932, 0xCE0, 0x00222222, 0xCE4, 0x00000000, 0xCE8, 0x37644302, 0xCEC, 0x2F97D40C, 0xD00, 0x00080740, 0xD04, 0x00020401, 0xD08, 0x0000907F, 0xD0C, 0x20010201, 0xD10, 0xA0633333, 0xD14, 0x3333BC43, 0xD18, 0x7A8F5B6B, 0xD2C, 0xCC979975, 0xD30, 0x00000000, 0xD34, 0x80608000, 0xD38, 0x00000000, 0xD3C, 0x00027293, 0xD40, 0x00000000, 0xD44, 0x00000000, 0xD48, 0x00000000, 0xD4C, 0x00000000, 0xD50, 0x6437140A, 0xD54, 0x00000000, 0xD58, 0x00000000, 0xD5C, 0x30032064, 0xD60, 0x4653DE68, 0xD64, 0x04518A3C, 0xD68, 0x00002101, 0xD6C, 0x2A201C16, 0xD70, 0x1812362E, 0xD74, 0x322C2220, 0xD78, 0x000E3C24, 0xE00, 0x2A2A2A2A, 0xE04, 0x2A2A2A2A, 0xE08, 0x03902A2A, 0xE10, 0x2A2A2A2A, 0xE14, 0x2A2A2A2A, 0xE18, 0x2A2A2A2A, 0xE1C, 0x2A2A2A2A, 0xE28, 0x00000000, 0xE30, 0x1000DC1F, 0xE34, 0x10008C1F, 0xE38, 0x02140102, 0xE3C, 0x681604C2, 0xE40, 0x01007C00, 0xE44, 0x01004800, 0xE48, 0xFB000000, 0xE4C, 0x000028D1, 0xE50, 0x1000DC1F, 0xE54, 0x10008C1F, 0xE58, 0x02140102, 0xE5C, 0x28160D05, 0xE60, 0x00000008, 0xE68, 0x001B25A4, 0xE6C, 0x631B25A0, 0xE70, 0x631B25A0, 0xE74, 0x081B25A0, 0xE78, 0x081B25A0, 0xE7C, 0x081B25A0, 0xE80, 0x081B25A0, 0xE84, 0x631B25A0, 0xE88, 0x081B25A0, 0xE8C, 0x631B25A0, 0xED0, 0x631B25A0, 0xED4, 0x631B25A0, 0xED8, 0x631B25A0, 0xEDC, 0x001B25A0, 0xEE0, 0x001B25A0, 0xEEC, 0x6B1B25A0, 0xF14, 0x00000003, 0xF4C, 0x00000000, 0xF00, 0x00000300, 

0xFF03050E, 0xDEAD };

const unsigned int getArrayLength(int board, int bus, int support) {
    return sizeof(PHY_REG_1TArray)/sizeof(int);
}

// real implementation
const unsigned int getArrayLength2(int board, int bus, int support) {
    return array_length;
}

unsigned int *getArrayPointer(int board, int bus, int support) { 
    unsigned int hex = 0;
    hex += board;
    hex += bus << 8;
    hex += support << 16;
    hex += 0xFF000000;

    printf("\n\n0x%X\n", hex);

    int i = 0;
    int len = getArrayLength(board, bus, support);
    while (PHY_REG_1TArray[i] != hex && i < len)
        i++;
    i += 2; // skip keywords like 0xABCD

    int j = 0;
    unsigned int *ptr_array = (unsigned int*)malloc(sizeof(int) * len);
    for (i; i < len; i += 2) {
        const unsigned int v1 = PHY_REG_1TArray[i];
        const unsigned int v2 = PHY_REG_1TArray[i+1];


        if (v2 != 0xABCD &&
            v2 != 0xCDEF &&
            v2 != 0xCDCD &&
            v2 != 0xDEAD ) { 
            ptr_array[j++] = v1;
            ptr_array[j++] = v2;
        } else {
            break;
        }
    }
    array_length = j - 1;

    return ptr_array;
}


int main(int argc, const char *argv[])
{

    unsigned int *array = getArrayPointer(14, 5, 3);
    int len = getArrayLength2(14, 5, 3);
    printf("ArrayLength: %u\n", len);

    int i;
    for (i = 0; i < len; i += 2) {
        printf("0x%03X 0x%08X\n", array[i], array[i+1]);
    }


    
    return 0;
}
