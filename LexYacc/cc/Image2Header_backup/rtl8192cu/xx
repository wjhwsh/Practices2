#include <stdio.h>
#include <stdlib.h>
int array_length = 0;

const unsigned int getArrayLength(int board, int bus, int support) {
    return sizeof(PHY_REG_1TArray)/sizeof(int);
}

// real implementation
const unsigned int getArrayLength2(int board, int bus, int support) {
    return array_length;
}

unsigned int *getArrayPointer(int board, int bus, int support) { 
    unsigned int hex = 0;
    hex += board;
    hex += bus << 8;
    hex += support << 16;
    hex += 0xFF000000;

    printf("\n\n0x%X\n", hex);

    int i = 0;
    int len = getArrayLength(board, bus, support);
    while (PHY_REG_1TArray[i] != hex && i < len)
        i++;
    i += 2; // skip keywords like 0xABCD

    int j = 0;
    unsigned int *ptr_array = (unsigned int*)malloc(sizeof(int) * len);
    for (i; i < len; i += 2) {
        const unsigned int v1 = PHY_REG_1TArray[i];
        const unsigned int v2 = PHY_REG_1TArray[i+1];


        if (v2 != 0xABCD &&
            v2 != 0xCDEF &&
            v2 != 0xCDCD &&
            v2 != 0xDEAD ) { 
            ptr_array[j++] = v1;
            ptr_array[j++] = v2;
        } else {
            break;
        }
    }
    array_length = j - 1;

    return ptr_array;
}


int main(int argc, const char *argv[])
{

    unsigned int *array = getArrayPointer(14, 5, 3);
    int len = getArrayLength2(14, 5, 3);
    printf("ArrayLength: %u\n", len);

    int i;
    for (i = 0; i < len; i += 2) {
        printf("0x%03X 0x%08X\n", array[i], array[i+1]);
    }


    
    return 0;
}
