#**********************************************************************
#*                      Sploit Mutation Engine                        *
#**********************************************************************
#* Copyright (C) 2004-2007 Davide Balzarotti                          *
#*                                                                    *
#* This program is free software; you can redistribute it and/or      *
#* modify it under the terms of the GNU General Public License        *
#* version 2.                                                         *
#*                                                                    *
#* This program is distributed in the hope that it will be useful,    *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               *
#* See the GNU General Public License for more details.               *
#*                                                                    *
#* You should have received a copy of the GNU General Public License  *
#* along with this program; if not, write to the Free Software        *
#* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          *
#*********************************************************************/

# Author: Davide Balzarotti
# $Id: exploit_w.py 109 2006-02-27 20:17:42Z balzarot $

import sys,string
from qt import *
from qttable import *
from coloritem import ColorItem

init_text = '''
<br><br><hr><br>
<center><big><b>Sploit v. 0.2</b></big></center>
<br><hr><br><br>
<i>Put here some fancy introduction to sploit</i>
<br><br>
Press <i>Open</i> button to load an exploit
'''

class ExploitWidget(QVBox):
	
	def __init__( self, parent, engine):
		QWidget.__init__( self, parent, None )
		self.engine = engine
		
		split = QSplitter(Qt.Vertical,self)
		
		
		self.details = QTextView(split)
		self.details.setMinimumSize(300,300)
			
		buttons = QHBox( self )
		buttons.setMargin( 5 )

		self.openB  = QPushButton( "&Open Exploit Template", buttons )
		self.loadB  = QPushButton( "&Load Configuration", buttons )
		self.saveB  = QPushButton( "&Save Configuration", buttons )
		self.connect( self.openB,  SIGNAL("clicked()"), self.load )
		self.connect( self.loadB,  SIGNAL("clicked()"), self.load_conf )
		self.connect( self.saveB,  SIGNAL("clicked()"), self.save_conf )
		
		#self.confB.setEnabled( False )
		
		self.table = QTable(0, 3, split)
		self.table.setLeftMargin(0)

		header = self.table.horizontalHeader()
		header.setLabel(0, "Parameter", 140)
		header.setLabel(1, "Value", 250)
		header.setLabel(2, "Description",380)
		header.setMovingEnabled(False)	
		
		self.connect( self.table, SIGNAL( 'valueChanged( int, int )' ), self.change_option )
		
		sizes = split.sizes()
		tot = sizes[0]+sizes[1]
		split.setSizes([tot*0.8,tot*0.2])
		
		self.refresh()
		
	def refresh(self):
		self.details.clear()
		self.table.setNumRows(0)
		if self.engine.exploit== None: 
			self.details.setText(init_text)
		else:
			self.details.setText(self.engine.exploit.description)
			#self.confB.setEnabled( True )
			params = self.engine.exploit.get_parameters()
			self.table.setNumRows(len(params))
			row = 0
			for p in params:
				self.table.setRowHeight(row,30)
				colit = ColorItem(self.table, QTableItem.Never, p.name, QColor(170,220,170),0)
				self.table.setItem(row, 0, colit)
				value = p.value
				if type(value) is str:
					value = "%r"%value
				else:
					value = "%s"%value
				self.table.setText(row, 1, value)
				self.table.setItem(row, 2, QTableItem(self.table, QTableItem.Never, p.description))
				row += 1
					
	def load(self):
		filename = QFileDialog.getOpenFileName('exploits','Exploit (*.py)',self,'Open File','Load Exploit')
		if len(filename) < 1:
			return
		self.engine.load_exploit(str(filename))
		self.refresh()
		if (self.engine.exploit == None):
			QMessageBox.critical(self, "Error", "Error loading...\r\n%s"%str(filename))

	def change_option(self, x,y):
		value = str(self.table.text(x,y))
		param = str(self.table.text(x,0))
		if y == 1:
			try:
				self.engine.exploit.set_parameter_value(param,eval(value))
			except Exception, msg:
				QMessageBox.warning(self, "Parameter Error",str(msg))
				self.properties(self.item)
				return

	def save_conf(self):
		filename = QFileDialog.getSaveFileName('conf','Configuration (*.conf)',self,'Save File','Save Configuration')
		if len(filename) < 1:
			return
		if filename[-5:] != ".conf":
			filename+=".conf"
		if (self.engine.save_configuration(str(filename)) == False):
			QMessageBox.warning(self, "Error","Error saving configuration file")

	def load_conf(self):
		filename = QFileDialog.getOpenFileName('conf','Configuration (*.conf)',self,'Open File','Load Configuration')
		if len(filename) < 1:
			return
		if (self.engine.load_configuration(str(filename)) == False):
			QMessageBox.warning(self, "Error","Error loading configuration file")
		self.refresh()
			
			
	def enter(self):
		pass
	
	def exit(self):
		return True
	
