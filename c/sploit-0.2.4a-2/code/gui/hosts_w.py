#**********************************************************************
#*                      Sploit Mutation Engine                        *
#**********************************************************************
#* Copyright (C) 2004-2007 Davide Balzarotti                          *
#*                                                                    *
#* This program is free software; you can redistribute it and/or      *
#* modify it under the terms of the GNU General Public License        *
#* version 2.                                                         *
#*                                                                    *
#* This program is distributed in the hope that it will be useful,    *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               *
#* See the GNU General Public License for more details.               *
#*                                                                    *
#* You should have received a copy of the GNU General Public License  *
#* along with this program; if not, write to the Free Software        *
#* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          *
#*********************************************************************/

# Author: Davide Balzarotti
# $Id: hosts_w.py 113 2006-03-02 14:09:33Z balzarot $

import sys,string,os
from qt import *

virt_desc = 'This is a fake host that is used as source for all the packets generated by the exploit.'
targ_desc = 'This is the target host, that is the host running the vulnerable services.'

warning1 = 'WARNING: Real (and potentially dangerous)\n attacks will be executed against this host!!'
warning2 = 'WARNING: To avoid conflicts, the network must\n not contain any computer with this address!!'


class HostsWidget(QVBox):
	
	def __init__( self, parent, engine):
		QWidget.__init__( self, parent, None )
		self.engine = engine
		self.iface_list = []

		self.setMargin( 10 )
		
		ifbox = QHBox( self )
		temp = QLabel( "Network Interface", ifbox )
		#temp.setFixedWidth(150)
		self.ifcombo = QComboBox( False, ifbox, "comboBox" )
		ifaces = self.engine.get_interfaces()
		for x in ifaces:
			self.iface_list.append(x)
			self.ifcombo.insertItem( x )
		self.connect( self.ifcombo, SIGNAL("activated(int)"), self.select_iface )
		
		tip  = QHBox(self)
		tip.setMargin( 0 )
		
		temp = QLabel( "Target IP", tip )
		self.targetip = QLineEdit(tip)
		self.targetip.setAlignment(4)

		tempbox1 = QHBox(self)
		temp = QLabel("",tempbox1)
		temp.setPixmap(QPixmap( "gui/icons/warning.png"))
		temp.setFixedWidth(40)
		QLabel(warning1,tempbox1)
			
					
		radio  = QGroupBox(8, QGroupBox.Vertical,"TPC/IP Stack", self)
		#radio.addSpacing( radio.fontMetrics().height() )
		radio.setInsideSpacing(10)
		
		self.rb1 = QRadioButton( radio )
		self.rb1.setText( "use the operating system stack" )
		self.rb1.setMinimumSize( self.rb1.sizeHint() )
		self.connect( self.rb1, SIGNAL( 'toggled( bool )' ), self.system_stack )
		
		self.rb2 = QRadioButton( radio )
		self.rb2.setText( "use the userland stack (requires ROOT privileges)" )
		self.rb2.setMinimumSize( self.rb2.sizeHint() )
		self.connect( self.rb2, SIGNAL( 'toggled( bool )' ), self.userland_stack )
				
		tmac = QHBox( radio )
		tmac.setMargin( 5 )
		
		temp = QLabel( "MAC Address of the Target Host:  ", tmac )
		temp.setMinimumWidth(370)
		self.targetmac = QLineEdit(tmac)
		self.targetmac.setAlignment(4)
					
		vaddr = QHBox( radio )
		vaddr.setMargin( 5 )

		temp = QLabel( "IP Address of the Virtual Host:  ", vaddr)
		temp.setMinimumWidth(370)
		self.fakeip = QLineEdit(vaddr)
		self.fakeip.setAlignment(4)
		
		vmac = QHBox( radio )
		vmac.setMargin( 5 )

		temp = QLabel( "MAC Address of the Virtual Host:  ", vmac )
		temp.setMinimumWidth(370)
		self.fakemac = QLineEdit( vmac)
		self.fakemac.setAlignment(4)
		
		tempbox2 = QHBox(radio)
		temp = QLabel("",tempbox2)
		temp.setPixmap(QPixmap( "gui/icons/warning.png"))
		temp.setFixedWidth(40)
		QLabel(warning2,tempbox2)

		target  = self.engine.getTargetHost()
		virtual = self.engine.getVirtualHost()

		self.targetip.setText(target[0])
		self.targetmac.setText(target[1])
		self.fakeip.setText(virtual[0])
		self.fakemac.setText(virtual[1])		
		
		QLabel("",radio)
				
		self.start_demon = QPushButton("Create the virtual host", radio)
		self.connect( self.start_demon, SIGNAL( 'clicked()' ), self.demon )
		
		if self.engine.is_userland_socket_enabled() == False:
			self.rb1.setChecked( True )
			self.targetmac.setEnabled( False )
			self.fakemac.setEnabled( False )
			self.fakeip.setEnabled( False )
			self.start_demon.setEnabled( False )
		else:
			self.rb2.setChecked( True )
			
		space = QLabel("",self)
		self.setStretchFactor(space,10)
		self.setSpacing(20)

			
	def system_stack(self, on):
		if on == False:
			return
		self.targetmac.setEnabled( False )
		self.fakemac.setEnabled( False )
		self.fakeip.setEnabled( False )
		self.start_demon.setEnabled( False )
		self.engine.set_userland_socket(False)
		self.rb2.setChecked( False )

	def userland_stack(self, on ):
		if on == False:
			return
		u = os.getuid()
		if u != 0:
			QMessageBox.warning(self,'Error', 'You must be ROOT')
			self.rb2.setChecked(False)
			return
		self.targetmac.setEnabled( True )
		self.fakemac.setEnabled( True )
		self.fakeip.setEnabled( True )
		self.start_demon.setEnabled( True )
		self.engine.set_userland_socket(True)
		self.rb1.setChecked( False )

	def normalize_ip(self, ip):
		ip = ip.strip().split('.')
		for n in range(len(ip)):
			if len(ip[n]) > 1 and ip[n][:1] == '0': ip[n] = ip[n][1:]
			if len(ip[n]) > 1 and ip[n][:1] == '0': ip[n] = ip[n][1:]
		return string.join(ip,'.')
				
	def validate_ip(self, ip):
		try:
			ip = string.split(ip,'.')
			for n in ip:
				val = int(n)
				if (val < 0) or (val > 255):
					return False
		except:
			return False
		return True
	
	def validate_mac(self, mac):
		try:
			for d in mac.replace(':',''):
				if (d in string.hexdigits) == False:
					print d
					return False
		except:
			return False
		return True
			
	def apply_target(self):
		if self.targetip.hasAcceptableInput() == False:
			QMessageBox.warning(self,'Error', 'The Target IP is not correct')
		ip  = self.normalize_ip(str(self.targetip.text()))
		if self.validate_ip(ip) == False:
			QMessageBox.warning(self,'Error', 'The Target IP is not correct')
			return False
		self.engine.setTargetHost(ip)
		return True
			
	def apply_virtual(self):
		if self.fakeip.hasAcceptableInput() == False:
			QMessageBox.warning(self,'Error', 'The Virtual IP is not correct')
			return False
		if self.fakeip.hasAcceptableInput() == False:
			QMessageBox.warning(self,'Error', 'The Virtual MAC is not correct')
			return False
		if self.targetmac.hasAcceptableInput() == False:
			QMessageBox.warning(self,'Error', 'The Target MAC is not correct')
			return False
		ip  = self.normalize_ip(str(self.fakeip.text()))
		smac = str(self.fakemac.text())
		tmac = str(self.targetmac.text())
		if self.validate_mac(tmac) == False:
			QMessageBox.warning(self,'Error', 'The Target MAC is not correct')
			return False
		if self.validate_ip(ip) == False:
			QMessageBox.warning(self,'Error', 'The Virtual IP is not correct')
			return False
		if self.validate_mac(smac) == False:
			QMessageBox.warning(self,'Error', 'The Virtual MAC is not correct')
			return False
		self.engine.setVirtualHost(tmac,smac,ip)
		return True
			
	def demon(self):
		if self.start_demon.text()=='Create the virtual host':
			self.apply_virtual()
			self.targetmac.setEnabled( False )
			self.fakemac.setEnabled( False )
			self.fakeip.setEnabled( False )
			self.rb1.setEnabled( False )
			self.rb2.setEnabled( False )
			self.engine.start_demon()
			self.start_demon.setText('Destroy the virtual host')
		else:
			self.targetmac.setEnabled( True )
			self.fakemac.setEnabled( True )
			self.fakeip.setEnabled( True )
			self.rb1.setEnabled( True )
			self.rb2.setEnabled( True )
			self.engine.stop_demon()
			self.start_demon.setText('Create the virtual host')
			
	def select_iface(self, n):
		self.engine.set_iface(str(self.ifcombo.currentText()))

	def enter(self):
		target  = self.engine.getTargetHost()
		virtual = self.engine.getVirtualHost()

		self.targetip.setText(target[0])
		self.targetmac.setText(target[1])
		self.fakeip.setText(virtual[0])
		self.fakemac.setText(virtual[1])
		
		iface = self.engine.get_iface()
		tmp = 0
		pos = -1
		for x in self.iface_list:
			if x == iface:
				pos = tmp
				break
			tmp += 1
		
		if pos >= 0:
			self.ifcombo.setCurrentItem(pos)
		else:
			print "Iface %s not found in %s"%(iface,self.iface_list)
		
	
	def exit(self):
		res = True
		if self.engine.is_userland_socket_enabled():
			res = self.apply_virtual()
			
		return (res and self.apply_target())
	



