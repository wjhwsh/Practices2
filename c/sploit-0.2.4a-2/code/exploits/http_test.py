from interfaces.exploit import Exploit, ExploitError, RES_ERROR, RES_OK, RES_UNKNOWN, RES_FAIL
from interfaces.hasparameters import StringParam
import managers.http as http

desc = '''
<br><hr><br>
<center><big><b>HTTP Test</b></big></center>
<hr><br><br>
<b>Vulnerability</b><hr>
None. 
<br><br>
<b>Attack Details</b><hr>
This code is only used to test the http functionality and does not 
really exploit any vulnerability.<br>
It actually perform an HTTP request and read the result.
<br><br>
Parameters:<br>
 [URL]  - The URL that is requested to the server<br>
 [TEXT] - A piece of the text that should be in the response page
<br><br>
'''


class WebTestExploit(Exploit):
	
	def __init__(self):
		Exploit.__init__(self,'HTTP Test Exploit', desc)
		self.add_param(StringParam('URL','/','The URL that is requested to the server'))
		self.add_param(StringParam('TEXT','well done','A piece of the text that should be in the response page'))
		
	def execute(self):
		self.res = None
		httpm = http.HttpManager()
	
		cmd = "GET "+self.URL
				
		self.log.info("Sending %s"%cmd)
		
		req = http.HttpRequest(cmd, header={'host':'none'})
		
		if(httpm.send_request(req) == False):
			self.log.error("Request failed")
			return
		
		self.res = httpm.get_http_response()
		
		self.log.info("Server reply: %s"%self.res.status)
		self.log.debug("RESULT: \r\n%s"%self.res)
		
		httpm.close()
						
	def isSuccessful(self):
		if (self.res != None) and (self.TEXT in str(self.res)):
			return RES_OK
		return RES_FAIL

