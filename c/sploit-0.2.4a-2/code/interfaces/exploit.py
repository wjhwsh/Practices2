#**********************************************************************
#*                      Sploit Mutation Engine                        *
#**********************************************************************
#* Copyright (C) 2004-2007 Davide Balzarotti                          *
#*                                                                    *
#* This program is free software; you can redistribute it and/or      *
#* modify it under the terms of the GNU General Public License        *
#* version.                                                           *
#*                                                                    *
#* This program is distributed in the hope that it will be useful,    *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               *
#* See the GNU General Public License for more details.               *
#*                                                                    *
#* You should have received a copy of the GNU General Public License  *
#* along with this program; if not, write to the Free Software        *
#* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          *
#*********************************************************************/

# Author: Davide Balzarotti
# $Id: exploit.py 130 2006-05-03 15:33:04Z balzarot $

import logger
from hasparameters import HasParameters
from managers import ip
import engine

RES_OK      = 1  # The exploit run successfully
RES_ERROR   = 2  # An error occurred during the exploit execution
RES_FAIL    = 3  # The exploit finished but failed
RES_UNKNOWN = 4  # The exploit finished but the result is unknown

results = [
 "",
 "OK",
 "ERROR",
 "FAIL",
 "UNKNOWN"
]

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                           EXCEPTIONS
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class ExploitError(Exception):
	'''Raised when a serius and unrecoverable error occurs during the execution of the exploit'''
	
	def __init__(self, value):
		self.value = value
	def __str__(self):
		return `self.value`
	
class ServiceDown(Exception):
	'''Raised when the target service seems to be down'''
	
	def __init__(self):
		pass

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#                              EXPLOIT
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class Exploit(HasParameters):
	'''Defines the interface that every exploits must implement'''
	
	
	def __init__(self, name, description):
		"""
		Create a new exploit.

		@type  name: string
		@param name: exploit name
		@type  description: string
		@param description: exploit description (can contain HTML tags)
		"""
		HasParameters.__init__(self)
		self.name        = name
		self.description = description
		self.log         = logger.main.newSource("EXPLOIT")

	def get_target_ip(self):
		return ip.DEFAULT_TARGET_ADDR
			
	def set_up(self):
		''' 
		Setup the exploit. 
		The engine calls this function only once before running the exploit.
		'''
		pass
	
	def tear_down(self): 
		'''
		Tears down the exploit. 
		The engine calls this function only once after the execution of the last mutant
		'''
		pass			
	
	def execute(self):
		'''
		Executes the exploit.
		'''
		self.log.error("Exploit execution not implemented !!")

		
	def isSuccessful(self):
		'''
		Gets the result of the last execution of the exploit.

		@returns RES_OK if the execution was successful, RES_FAIL if it failed, 
		RES_UNKNOWN if the exploit was not able to figure out the result
		of the execution, and RES_ERROR if an error occurred during the execution
		'''
		return None
	

		
		
