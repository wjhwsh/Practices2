#**********************************************************************
#*                      Sploit Mutation Engine                        *
#**********************************************************************
#* Copyright (C) 2006 Davide Balzarotti                               *
#*                                                                    *
#* This program is free software; you can redistribute it and/or      *
#* modify it under the terms of the GNU General Public License        *
#* as published by the Free Software Foundation; either               *
#* version 2 of the License, or (at your option) any later            *
#* version.                                                           *
#*                                                                    *
#* This program is distributed in the hope that it will be useful,    *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               *
#* See the GNU General Public License for more details.               *
#*                                                                    *
#* You should have received a copy of the GNU General Public License  *
#* along with this program; if not, write to the Free Software        *
#* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          *
#*********************************************************************/

# Author: Andrea Beretta and Riccardo Bianchi
# $Id$

'''
IPOverlap
------------
 It sends a small fragment totally overlapped in another one.
 It is possible to set if the small fragment should be sent before or after the big one.
'''

from IPLayerOperator import IPLayerOperator
from interfaces.hasparameters import IntParam
from interfaces.hasparameters import KeyListParam
import managers.ip as ip
import utils

class IPOverlap(IPLayerOperator):
	isa_operator      = True  
	
	def __init__(self):
		IPLayerOperator.__init__(self,'IPOverlap','IP Fragmenter with overlapping fragment & bad payload')	
		self.add_param(IntParam('numfrag',1,'Fragment with bad payload',1))
		pos_list = ["before", "after"]
		self.add_param(KeyListParam('position',pos_list[1], pos_list, 'position of overlapping fragment => before | after'))
		
	def mutate(self, packets):
		numfrag = self.numfrag
		position = self.position
		
		if utils.check_length(numfrag, packets):
			return packets 
		
		
		forged = packets[numfrag-1].copy()
		forged = utils.ip_bad_payload(forged)
		
		if position == "after":
			packets.insert(numfrag, forged)
		else:	
			packets.insert(numfrag-1, forged)

		return packets
