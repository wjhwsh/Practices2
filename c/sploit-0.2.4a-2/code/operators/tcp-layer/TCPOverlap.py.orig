#**********************************************************************
#*                      Sploit Mutation Engine                        *
#**********************************************************************
#* Copyright (C) 2006 Davide Balzarotti                               *
#*                                                                    *
#* This program is free software; you can redistribute it and/or      *
#* modify it under the terms of the GNU General Public License        *
#* as published by the Free Software Foundation; either               *
#* version 2 of the License, or (at your option) any later            *
#* version.                                                           *
#*                                                                    *
#* This program is distributed in the hope that it will be useful,    *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               *
#* See the GNU General Public License for more details.               *
#*                                                                    *
#* You should have received a copy of the GNU General Public License  *
#* along with this program; if not, write to the Free Software        *
#* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          *
#*********************************************************************/

# Author: Andrea Beretta and Riccardo Bianchi
# $Id$

'''
TCPOverlap
 Insert an overlapping fragment with random payload
'''

from TCPLayerOperator import TCPLayerOperator
from interfaces.hasparameters import IntParam
from interfaces.hasparameters import KeyListParam
import utils

class TCPOverlap(TCPLayerOperator):
	isa_operator      = True  
	
	def __init__(self):
		TCPLayerOperator.__init__(self,'TCPOverlap','Overlapping TCP segment with bad payload')	
		self.add_param(IntParam('numseg',2,'Segment with bad payload',1))
		pos_list = ["before", "after"]
		self.add_param(KeyListParam('position',pos_list[1], pos_list, 'position of overlapping fragment => before | after'))

		
	def mutate(self, packets):
		numseg = self.numseg
		position = self.position
		
		#Not enough segments, Syn or Ack, return
		if utils.check_length(numseg, packets) or utils.check_syn(packets[numseg-1]) or utils.check_ack(packets[numseg-1]):
			return packets		
		
		forged = packets[numseg-1].copy()
		forged = utils.tcp_bad_payload(forged)
		
		if position == "after":
			packets.insert(numseg, forged)
		else:	
			packets.insert(numseg-1, forged)

		return packets