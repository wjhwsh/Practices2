#**********************************************************************
#*                      Sploit Mutation Engine                        *
#**********************************************************************
#* Copyright (C) 2006 Davide Balzarotti                               *
#*                                                                    *
#* This program is free software; you can redistribute it and/or      *
#* modify it under the terms of the GNU General Public License        *
#* as published by the Free Software Foundation; either               *
#* version 2 of the License, or (at your option) any later            *
#* version.                                                           *
#*                                                                    *
#* This program is distributed in the hope that it will be useful,    *
#* but WITHOUT ANY WARRANTY; without even the implied warranty of     *
#* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               *
#* See the GNU General Public License for more details.               *
#*                                                                    *
#* You should have received a copy of the GNU General Public License  *
#* along with this program; if not, write to the Free Software        *
#* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.          *
#*********************************************************************/

# Author: Andrea Beretta and Riccardo Bianchi
# $Id$

'''
TCPSynData
 It enable the TCP manager to send data with the SYN packet
'''

from TCPLayerOperator import TCPLayerOperator
import managers.tcp as tcp
import utils

class TCPSynData(TCPLayerOperator):	
	isa_operator      = True  

	def __init__(self):
		TCPLayerOperator.__init__(self,'TCPSynData','Send data in SYN packet')	

									
	def mutate(self, packets):
		has_l4m = 0
		
		#find tcp manager reference, otherwise return packetsS
		for p in packets:
			if hasattr(p, "l4manager"):		
				l4m = p.l4manager
				has_l4m = 1
				break
		if not has_l4m:		
			return packets	
		
		#if (packets[0].flags == 2) and (packets[0].l4manager.state == 1):
		#if real SYN
		if utils.check_syn(packets[0]) and (packets[0].l4manager.state == tcp.TCPS_SYN_SENT):
			l4m.delay_syn = True
			return []
		
		return packets


